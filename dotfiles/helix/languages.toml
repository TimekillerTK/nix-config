[[language]]
name = "python"
scope = "source.python"
injection-regex = "python"
file-types = ["py","pyi","py3","pyw",".pythonstartup",".pythonrc"]
shebangs = ["python"]
roots = [".", "pyproject.toml", "pyrightconfig.json"]
comment-token = "#"
language-servers = [
  "pyright",
  "ruff"
]
formatter = { command = "zsh", args = ["-c", "ruff check --fix - | ruff format -"] }
auto-format = true

[language-server.pyright]
command = "pyright-langserver"
args = ["--stdio"]

[language-server.pyright.config]
reportMissingTypeStubs = false

[language-server.pyright.config.python.analysis]
typeCheckingMode = "strict"
autoImportCompletions = true

[language-server.ruff]
command = "ruff"
args = ["server"]

# ----------------------------

[[language]]
name = "json"
language-servers = ["vscode-json-language-server"]
auto-format = true
indent = { tab-width = 2, unit = " " }
formatter = { command = "prettier", args = ["--parser", "json"]}

# Old setup before using prettier - may be handy
# [language-server.vscode-json-language-server]
# command = "vscode-json-language-server"
# args = ["--stdio"]

# [language-server.vscode-json-language-server.config]
# json = { validate = { enable = true }, format = { enable = true } }
# provideFormatter = true

# ----------------------------

[[language]]
name = "rust"
auto-format = true
formatter = { command = "rustfmt"}

# ----------------------------

[[language]]
name = "nix"
auto-format = true
formatter = { command = "alejandra"}

# ----------------------------

[[language]]
name = "bash"
auto-format = true
formatter = { command = "shfmt" }

# ----------------------------

[[language]]
name = "yaml"
auto-format = true
formatter = { command = "prettier", args = ["--parser", "yaml"]}

[language-server.yaml-language-server]
# Custom CFN Tags below for YAML
config = { yaml = { customTags = [
    "!Ref scalar",
    "!Ref sequence",
    "!Ref mapping",
    "!Sub scalar",
    "!Sub sequence",
    "!Sub mapping",
    "!GetAtt scalar",
    "!GetAtt sequence",
    "!GetAtt mapping",
    "!Join sequence",
    "!FindInMap sequence",
    "!Select sequence",
    "!Split sequence",
    "!ImportValue scalar",
    "!ImportValue sequence",
    "!ImportValue mapping",
    "!GetAZs sequence"
] } }
